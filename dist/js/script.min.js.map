{"version":3,"names":[],"mappings":"","sources":["script.js"],"sourcesContent":["\"use strict\";\n\n// --- Меню бургер ---\n(function () {\n  var burgerButton = document.querySelector('.main-nav__toggle');\n  var elements = [];\n  elements.push(document.querySelector('.main-nav__list'));\n  elements.push(document.querySelector('.page-header__user-nav'));\n\n  for (var i = 0; i < elements.length; i++) {\n    elements[i].classList.remove('main-nav--nojs');\n  }\n\n  ;\n\n  function onBurgerButtonClick() {\n    for (var i = 0; i < elements.length; i++) {\n      elements[i].classList.toggle('is-active');\n    }\n\n    ;\n  }\n\n  burgerButton.addEventListener('click', onBurgerButtonClick);\n})(); // --- ! Меню бургера ---\n// --- Пoп-ап ---\n\n\n(function () {\n  var modalLinks = document.querySelectorAll('.toggle-modal');\n  var body = document.querySelector('body');\n  var modalCloseIcon = document.querySelectorAll('.close-modal');\n  var focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n  var lockPadding = document.querySelectorAll(\".lock-padding\");\n  var timeout = 200;\n  var lockPaddingValue = window.innerWidth - body.offsetWidth + 'px';\n  var unlock = true;\n  console.log(123);\n\n  if (modalLinks.length > 0) {\n    for (var index = 0; index < modalLinks.length; index++) {\n      var modalLink = modalLinks[index];\n      modalLink.addEventListener(\"click\", function (evt) {\n        var modalName = this.getAttribute('data-target');\n        var curentModal = document.querySelector(modalName);\n        modalOpen(curentModal);\n        evt.preventDefault();\n      });\n    }\n  }\n\n  function onModalEscPress(evt) {\n    if (evt.keyCode === 27) {\n      var modalActive = document.querySelector('.modal.open');\n      modalClose(modalActive);\n    }\n  }\n\n  function onModalOutsideClick(evt) {\n    if (!evt.target.closest('.modal__content')) {\n      modalClose(evt.target.closest('.modal'));\n    }\n  }\n\n  function onModalTabClick(evt) {\n    var isTabPressed = evt.key === 'Tab' || evt.keyCode === 9;\n    var firstFocusableElement = this.querySelectorAll(focusableElements)[0];\n    var focusableContent = this.querySelectorAll(focusableElements);\n    var lastFocusableElement = focusableContent[focusableContent.length - 1];\n\n    if (!isTabPressed) {\n      return;\n    }\n\n    if (evt.shiftKey) {\n      if (document.activeElement === firstFocusableElement) {\n        console.log(firstFocusableElement);\n        lastFocusableElement.focus();\n        evt.preventDefault();\n      }\n    } else {\n      if (document.activeElement === lastFocusableElement) {\n        firstFocusableElement.focus();\n        evt.preventDefault();\n      }\n    }\n  }\n\n  function modalOpen(curentModal) {\n    var firstFocusableElement = curentModal.querySelectorAll(focusableElements)[0];\n\n    if (curentModal && unlock) {\n      var modalActive = document.querySelector('.modal.open');\n\n      if (modalActive) {\n        modalClose(modalActive, false);\n      } else {\n        bodyLock();\n      }\n\n      curentModal.classList.add('open');\n      curentModal.addEventListener(\"click\", onModalOutsideClick);\n      document.addEventListener('keydown', onModalEscPress);\n      curentModal.addEventListener('keydown', onModalTabClick);\n      setTimeout(function () {\n        firstFocusableElement.focus();\n        firstFocusableElement.blur();\n      }, timeout);\n    }\n  }\n\n  if (modalCloseIcon.length > 0) {\n    for (var _index = 0; _index < modalCloseIcon.length; _index++) {\n      var el = modalCloseIcon[_index];\n      el.addEventListener('click', function (evt) {\n        modalClose(el.closest('.modal'));\n        evt.preventDefault();\n      });\n    }\n  }\n\n  function modalClose(modalActive) {\n    var doUnlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (unlock) {\n      modalActive.classList.remove('open');\n      modalActive.removeEventListener(\"click\", onModalOutsideClick);\n      document.removeEventListener('keydown', onModalEscPress);\n\n      if (doUnlock) {\n        bodyUnLock();\n      }\n    }\n  }\n\n  function bodyLock() {\n    /* Для фикса фиксированной шапки */\n    if (lockPadding.length > 0) {\n      for (var _index2 = 0; _index2 < lockPadding.length; _index2++) {\n        var _el = lockPadding[_index2];\n        _el.style.paddingRight = lockPaddingValue;\n      }\n    }\n\n    body.style.paddingRight = lockPaddingValue;\n    body.classList.add('lock');\n    unlock = false;\n    setTimeout(function () {\n      unlock = true;\n    }, timeout);\n  }\n\n  function bodyUnLock() {\n    setTimeout(function () {\n      if (lockPadding.length > 0) {\n        for (var _index3 = 0; _index3 < lockPadding.length; _index3++) {\n          var _el2 = lockPadding[_index3];\n          _el2.style.paddingRight = '0px';\n        }\n      }\n\n      body.style.paddingRight = '0px';\n      body.classList.remove('lock');\n    }, timeout);\n    unlock = false;\n    setTimeout(function () {\n      unlock = true;\n    }, timeout);\n  }\n\n  (function () {\n    // проверяем поддержку\n    if (!Element.prototype.closest) {\n      // реализуем\n      Element.prototype.closest = function (css) {\n        var node = this;\n\n        while (node) {\n          if (node.matches(css)) return node;else node = node.parentElement;\n        }\n\n        return null;\n      };\n    }\n  })();\n\n  (function () {\n    // проверяем поддержку\n    if (!Element.prototype.matches) {\n      // определяем свойство\n      Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;\n    }\n  })();\n})(); // --- !Пoп-ап ---"],"file":"script.min.js"}